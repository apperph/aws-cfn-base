# **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack from this template.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates an OpenSearch domain and related resources.'

Metadata:
  Authors:
    Description: 'Apper DevOps (developers@apper.ph)'
  License:
    Description: >
      'Copyright 2021 Apper Digital Inc. and its affiliates. All Rights Reserved.
      SPDX-License-Identifier:  Apache-2.0'

Parameters:
  EnvironmentName:
    Description: 'The name of environment for the current stack (e.g. dev, test, staging, beta, production).'
    Type: String
  LoadBalancerName:
    Description: 'The name of the Elastic Load Balancer.'
    Type: String

  Scheme:
    Description: 'Specifies whether the load balancer is internal or internet-facing'
    Type: String
    Default: 'internet-facing'
    AllowedValues:
      - 'internal'
      - 'internet-facing'
  SSLCertificateArn:
    Description: 'The Amazon Resource Name (ARN) of an SSL certificate to bind to the listener.'
    Type: String
    Default: ''
  RedirectToHTTPS:
    Description: 'Specifies whether to redirect non-HTTPS requests to HTTPS.'
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  RedirectToHTTPSCode:
    Description: 'Specifies the status code to use when redirecting to HTTPS'
    Type: String
    Default: 'HTTP_301'
    AllowedValues:
      - 'HTTP_301'
      - 'HTTP_302'

  VpcId:
    Description: 'VPC ID that will be associated with the Elastic Beanstalk Environment.'
    Type: String
  SubnetIds:
    Description: 'List of subnet IDs that will be associated with the Elastic Beanstalk Application.'
    Type: CommaDelimitedList

  HasSSMParameterIntegration:
    Description: 'Enabling this option will use SSM Parameter Store to store parameter values that can be used by other AWS Cloudformation stacks.'
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  HasSSMParameterIntegration: !Equals [!Ref HasSSMParameterIntegration, 'true']
  HasSSLCertificateArn: !Not [!Equals [!Ref SSLCertificateArn, '']]
  HasSSMParameterIntegrationAndHasSSLCertificateArn: !And [!Condition HasSSMParameterIntegration, !Condition HasSSLCertificateArn]
  RedirectToHTTPS: !Equals [!Ref RedirectToHTTPS, 'true']

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Security group for ELB ${EnvironmentName}-${LoadBalancerName}'
      GroupName: !Sub '${EnvironmentName}-${LoadBalancerName}-elb-sg'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: 'Allow inbound access to HTTP'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - Fn::If:
          - HasSSLCertificateArn
          - CidrIp: '0.0.0.0/0'
            Description: 'Allow inbound access to HTTPS'
            FromPort: 443
            IpProtocol: tcp
            ToPort: 443
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-${LoadBalancerName}-elb-sg'
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub '${EnvironmentName}-${LoadBalancerName}'
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt 'SecurityGroup.GroupId'
      Subnets: !Ref SubnetIds
      Tags:
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
      Type: application

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Fn::If:
          - RedirectToHTTPS
          - RedirectConfig:
              Protocol: 'HTTPS'
              Port: '443'
              Host: '#{host}'
              Path: '/#{path}'
              Query: '#{query}'
              StatusCode: !Ref RedirectToHTTPSCode
            Order: 1
            Type: 'redirect'
          - FixedResponseConfig:
              ContentType: 'text/plain'
              MessageBody: 'Not found.'
              StatusCode: '404'
            Order: 1
            Type: 'fixed-response'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Condition: HasSSLCertificateArn
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - FixedResponseConfig:
            ContentType: 'text/plain'
            MessageBody: 'Not found.'
            StatusCode: '404'
          Order: 1
          Type: 'fixed-response'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS

  #################################
  ######## Parameter Store ########
  #################################

  SSMParamSecurityGroupId:
    Condition: HasSSMParameterIntegration
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cfn/${EnvironmentName}/elbv2/${LoadBalancerName}/security-group/id'
      Type: 'String'
      Value: !GetAtt 'SecurityGroup.GroupId'

  SSMParamLoadBalancerArn:
    Condition: HasSSMParameterIntegration
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cfn/${EnvironmentName}/elbv2/${LoadBalancerName}/arn'
      Type: 'String'
      Value: !Ref LoadBalancer

  SSMParamLoadBalancerCanonicalHostedZoneID:
    Condition: HasSSMParameterIntegration
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cfn/${EnvironmentName}/elbv2/${LoadBalancerName}/canonical-hosted-zone-id'
      Type: 'String'
      Value: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'

  SSMParamLoadBalancerDNSName:
    Condition: HasSSMParameterIntegration
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cfn/${EnvironmentName}/elbv2/${LoadBalancerName}/dns-name'
      Type: 'String'
      Value: !GetAtt 'LoadBalancer.DNSName'

  SSMParamLoadBalancerHTTPListenerArn:
    Condition: HasSSMParameterIntegration
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cfn/${EnvironmentName}/elbv2/${LoadBalancerName}/listeners/http/arn'
      Type: 'String'
      Value: !GetAtt 'HTTPListener.ListenerArn'

  SSMParamLoadBalancerHTTPSListenerArn:
    Condition: HasSSMParameterIntegrationAndHasSSLCertificateArn
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cfn/${EnvironmentName}/elbv2/${LoadBalancerName}/listeners/https/arn'
      Type: 'String'
      Value: !GetAtt 'HTTPSListener.ListenerArn'

Outputs:
  StackName:
    Description: 'Stack name'
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${AWS::StackName}:StackName'

  SecurityGroupId:
    Description: 'Security group used by the load balancer'
    Value: !GetAtt 'SecurityGroup.GroupId'
    Export:
      Name: !Sub '${AWS::StackName}:SecurityGroupId'

  LoadBalancerArn:
    Description: 'ARN of the Elasitc Load Balancer'
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}:LoadBalancerArn'

  LoadBalancerCanonicalHostedZoneID:
    Description: 'The ID of the Amazon Route 53 hosted zone associated with the load balancer.'
    Value: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
    Export:
      Name: !Sub '${AWS::StackName}:LoadBalancerCanonicalHostedZoneID'

  LoadBalancerDNSName:
    Description: 'The DNS name for the load balancer.'
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}:LoadBalancerDNSName'

  HTTPListenerArn:
    Description: 'ARN of the Elasitc Load Balancer HTTP Listener'
    Value: !GetAtt 'HTTPListener.ListenerArn'
    Export:
      Name: !Sub '${AWS::StackName}:HTTPListenerArn'

  HTTPSListenerArn:
    Condition: HasSSLCertificateArn
    Description: 'ARN of the Elasitc Load Balancer HTTPS Listener'
    Value: !GetAtt 'HTTPSListener.ListenerArn'
    Export:
      Name: !Sub '${AWS::StackName}:HTTPSListenerArn'
